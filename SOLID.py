"""Principios SOLID

Los principios SOLID son un conjunto de reglas para el dise√±o de software orientado a objetos, promoviendo c√≥digo flexible y f√°cil de mantener.
1. Single Responsibility Principle (SRP) - Responsabilidad √önica

Cada clase o funci√≥n debe tener una sola responsabilidad.

‚ùå Mal Ejemplo (M√∫ltiples responsabilidades):"""
class Reporte:
    def generar_pdf(self):
        pass  # Genera el PDF del reporte
    
    def guardar_en_db(self):
        pass  # Guarda el reporte en la base de datos

"""‚úÖ Buen Ejemplo (Separa responsabilidades en clases distintas):"""
class Reporte:
    def generar_contenido(self):
        pass  # Genera el contenido del reporte

class ReportePDF:
    def generar_pdf(self, reporte):
        pass  # Convierte el reporte a PDF

class ReporteDB:
    def guardar_en_db(self, reporte):
        pass  # Guarda el reporte en la base de datos

"""2. Open/Closed Principle (OCP) - Abierto/Cerrado

Las clases deben estar abiertas para extensi√≥n, pero cerradas para modificaci√≥n.

‚ùå Mal Ejemplo (Modifica c√≥digo existente para agregar nueva funcionalidad):"""
class Calculadora:
    def operar(self, a, b, operacion):
        if operacion == "suma":
            return a + b
        elif operacion == "resta":
            return a - b

"""‚úÖ Buen Ejemplo (Usa polimorfismo para extender funcionalidades sin modificar c√≥digo existente):"""
from abc import ABC, abstractmethod

class Operacion(ABC):
    @abstractmethod
    def calcular(self, a, b):
        pass

class Suma(Operacion):
    def calcular(self, a, b):
        return a + b

class Resta(Operacion):
    def calcular(self, a, b):
        return a - b


"""
NOTA 1
Uso B√°sico de abstractmethod

Para usar abstractmethod, seguimos estos pasos:

    Importar ABC y abstractmethod desde abc.
    Crear una clase base abstracta, heredando de ABC.
    Definir m√©todos abstractos con @abstractmethod (sin implementaci√≥n).
    Las subclases deben implementar esos m√©todos o Python lanzar√° un error.

Ejemplo 1: Uso B√°sico

‚ùå Sin abstractmethod (No obliga a implementar el m√©todo en la subclase)
"""
class Animal:
    def hacer_sonido(self):
        pass  # No obliga a implementarlo

class Perro(Animal):
    pass  # No define hacer_sonido() y no da error

p = Perro()
print(p.hacer_sonido())  # No genera error, pero es incorrecto

"""‚úÖ Con abstractmethod (Obliga a implementar el m√©todo en la subclase)"""
from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def hacer_sonido(self):
        pass  # M√©todo obligatorio en subclases

class Perro(Animal):
    def hacer_sonido(self):
        return "Guau Guau"

p = Perro()
print(p.hacer_sonido())  # ‚úÖ Output: "Guau Guau"


"""Ejemplo 2: Implementando una Jerarqu√≠a de Figuras

‚úÖ Clase abstracta para definir un m√©todo obligatorio calcular_area()
"""
from abc import ABC, abstractmethod

class Figura(ABC):
    @abstractmethod
    def calcular_area(self):
        pass

class Circulo(Figura):
    def __init__(self, radio):
        self.radio = radio

    def calcular_area(self):
        return 3.1416 * self.radio ** 2

class Rectangulo(Figura):
    def __init__(self, ancho, alto):
        self.ancho = ancho
        self.alto = alto

    def calcular_area(self):
        return self.ancho * self.alto

# Crear instancias y calcular √°rea
c = Circulo(5)
r = Rectangulo(4, 6)

print(c.calcular_area())  # ‚úÖ Output: 78.54
print(r.calcular_area())  # ‚úÖ Output: 24

"""
Ejemplo 3: M√©todos Abstractos con Implementaci√≥n

üîπ A veces, queremos que un m√©todo abstracto tenga una implementaci√≥n base que las subclases puedan reutilizar."""
from abc import ABC, abstractmethod

class Vehiculo(ABC):
    def __init__(self, marca):
        self.marca = marca

    @abstractmethod
    def describir(self):
        print(f"Este veh√≠culo es un {self.marca}")  # Implementaci√≥n base

class Auto(Vehiculo):
    def describir(self):
        super().describir()  # Usa la implementaci√≥n base
        print("Es un auto con 4 ruedas.")

coche = Auto("Toyota")
coche.describir()

"""‚úÖ Output:

Este veh√≠culo es un Toyota  
Es un auto con 4 ruedas.

    üîπ Ventaja: Podemos proporcionar una implementaci√≥n base que las subclases pueden extender."""


"""Ejemplo 4: Clases Abstractas con Propiedades

Podemos definir propiedades abstractas con @property para que las subclases deban implementarlas."""
from abc import ABC, abstractmethod

class Persona(ABC):
    @property
    @abstractmethod
    def profesion(self):
        pass

class Doctor(Persona):
    @property
    def profesion(self):
        return "M√©dico"

d = Doctor()
print(d.profesion)  # ‚úÖ Output: "M√©dico"

"""Conclusi√≥n
‚úÖ abstractmethod garantiza que las subclases implementen m√©todos esenciales.
‚úÖ Ayuda a mantener un dise√±o estructurado y evita errores por m√©todos olvidados.
‚úÖ Puede combinarse con @property y super() para m√°s flexibilidad."""


"""
Ejemplo Complejo: Dependency Inversion Principle (DIP)

üéØ Evitar dependencia directa en implementaciones espec√≠ficas.
‚ùå Mal C√≥digo (La clase depende de una implementaci√≥n espec√≠fica, no de una abstracci√≥n):"""
class MySQLDatabase:
    def conectar(self):
        return "Conectado a MySQL"

class Usuario:
    def __init__(self):
        self.db = MySQLDatabase()

"""‚úÖ Buen C√≥digo (Uso de interfaces para desacoplar dependencias):"""
class Database:
    def conectar(self):
        pass

class MySQLDatabase(Database):
    def conectar(self):
        return "Conectado a MySQL"

class Usuario:
    def __init__(self, db: Database):
        self.db = db
